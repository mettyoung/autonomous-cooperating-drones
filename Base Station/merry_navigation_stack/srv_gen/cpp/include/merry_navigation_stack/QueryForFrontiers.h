/* Auto-generated by genmsg_cpp for file /media/DATA/Dropbox/ros/merry_navigation_stack/srv/QueryForFrontiers.srv */
#ifndef MERRY_NAVIGATION_STACK_SERVICE_QUERYFORFRONTIERS_H
#define MERRY_NAVIGATION_STACK_SERVICE_QUERYFORFRONTIERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/PoseStamped.h"

namespace merry_navigation_stack
{
template <class ContainerAllocator>
struct QueryForFrontiersRequest_ {
  typedef QueryForFrontiersRequest_<ContainerAllocator> Type;

  QueryForFrontiersRequest_()
  : id(0)
  {
  }

  QueryForFrontiersRequest_(const ContainerAllocator& _alloc)
  : id(0)
  {
  }

  typedef int64_t _id_type;
  int64_t id;


  typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QueryForFrontiersRequest
typedef  ::merry_navigation_stack::QueryForFrontiersRequest_<std::allocator<void> > QueryForFrontiersRequest;

typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersRequest> QueryForFrontiersRequestPtr;
typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersRequest const> QueryForFrontiersRequestConstPtr;


template <class ContainerAllocator>
struct QueryForFrontiersResponse_ {
  typedef QueryForFrontiersResponse_<ContainerAllocator> Type;

  QueryForFrontiersResponse_()
  : currentPose()
  , frontier()
  {
  }

  QueryForFrontiersResponse_(const ContainerAllocator& _alloc)
  : currentPose(_alloc)
  , frontier(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _currentPose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  currentPose;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _frontier_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  frontier;


  typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QueryForFrontiersResponse
typedef  ::merry_navigation_stack::QueryForFrontiersResponse_<std::allocator<void> > QueryForFrontiersResponse;

typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersResponse> QueryForFrontiersResponsePtr;
typedef boost::shared_ptr< ::merry_navigation_stack::QueryForFrontiersResponse const> QueryForFrontiersResponseConstPtr;

struct QueryForFrontiers
{

typedef QueryForFrontiersRequest Request;
typedef QueryForFrontiersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct QueryForFrontiers
} // namespace merry_navigation_stack

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ef7df1d34137d3879d089ad803388efa";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xef7df1d34137d387ULL;
  static const uint64_t static_value2 = 0x9d089ad803388efaULL;
};

template<class ContainerAllocator>
struct DataType< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "merry_navigation_stack/QueryForFrontiersRequest";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 id\n\
\n\
";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4164251a2e73ce0dc313e0217d7f3af7";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4164251a2e73ce0dULL;
  static const uint64_t static_value2 = 0xc313e0217d7f3af7ULL;
};

template<class ContainerAllocator>
struct DataType< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "merry_navigation_stack/QueryForFrontiersResponse";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped currentPose\n\
geometry_msgs/PoseStamped frontier\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QueryForFrontiersRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.currentPose);
    stream.next(m.frontier);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QueryForFrontiersResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<merry_navigation_stack::QueryForFrontiers> {
  static const char* value() 
  {
    return "b59605035d5cd447976dd8ed473a4ffd";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiers&) { return value(); } 
};

template<>
struct DataType<merry_navigation_stack::QueryForFrontiers> {
  static const char* value() 
  {
    return "merry_navigation_stack/QueryForFrontiers";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiers&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b59605035d5cd447976dd8ed473a4ffd";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "merry_navigation_stack/QueryForFrontiers";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b59605035d5cd447976dd8ed473a4ffd";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "merry_navigation_stack/QueryForFrontiers";
  }

  static const char* value(const merry_navigation_stack::QueryForFrontiersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MERRY_NAVIGATION_STACK_SERVICE_QUERYFORFRONTIERS_H

